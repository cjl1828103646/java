package 第七次作业;
import java.util.Scanner;
public class 课后练习9_10 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);
		System.out.print("Enter a, b, c: ");
		double a = input.nextDouble();
		double b = input.nextDouble();
		double c = input.nextDouble();
		QuardraticEquation qe = new QuardraticEquation(a,b,c);
		if(qe.getDiscriminant() == 0) {
			System.out.print("The equation has one root " + qe.getRoot1());
		}
		else if(qe.getDiscriminant() > 0) {
			System.out.print("The equation has two roots" + qe.getRoot1() + " and " + qe.getRoot2());
		}
		else{
			System.out.print("The equation has no real roots");
		}
	}
}
class QuardraticEquation{
	private double a,b,c;
	public QuardraticEquation(double x,double y,double z) {
		a = x;
		b = y;
		c = z;
	}
	public double getA() {
		return a;
	}
	public double getB() {
		return b;
	}
	public double getC() {
		return c;
	}
	public double getDiscriminant() {
		return b * b - 4 * a * c;
	}
	public double getRoot1() {
		if(getDiscriminant() < 0) {
			return 0;
		}
		return (-b + Math.sqrt(getDiscriminant())) / (2 * a);
	}
	public double getRoot2() {
		if(getDiscriminant() < 0) {
			return 0;
		}
		return (-b - Math.sqrt(getDiscriminant())) / (2 * a);
	}
}


package 第七次作业;
import java.util.Scanner;
public class 课后练习9_11 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);
		System.out.print("Enter a, b, c, d, e, f: ");
		double a = input.nextDouble();
		double b = input.nextDouble();
		double c = input.nextDouble();
		double d = input.nextDouble();
		double e = input.nextDouble();
		double f = input.nextDouble();
		LinearEquation le = new LinearEquation(a,b,c,d,e,f);
		if(le.isSolvable()) {
			System.out.print("x is " + le.getX() + " and y is " + le.getY());
		}
		else {
			System.out.print("The equation has no solution");
		}
	}
}
class LinearEquation{
	private double a,b,c,d,e,f;
	LinearEquation(double x,double y,double z,double q,double w,double s){
		a = x;
		b = y;
		c = z;
		d = q;
		e = w;
		f = s;
	}
	public double getA() {
		return a;
	}
	public double getB() {
		return b;
	}
	public double getC() {
		return c;
	}
	public double getD() {
		return d;
	}
	public double getE() {
		return e;
	}
	public double getF() {
		return f;
	}
	public boolean isSolvable() {
		if(a * d - b * c == 0) {
			return false;
		}
			return true;
	}
	public double getX() {
		return (e * d - b * f) / (a * d - b * c);
	}
	public double getY() {
		return (a * f - e * c) / (a * d - b * c);
	}
}


package 第七次作业;
import java.util.Date;
public class 课后练习9_3 {
	Date date = new Date();
	
	public void setDate(int n) {
		date.setTime(n);
	}
	
	public void getDate() {
		System.out.print(date.toString());
	}
	
	public static void main(String[] args) {
		Date date = new Date();
		for(long i = 10000; i <= 1e10;i=i*10) {
	            date.setTime(i);
	            System.out.println(date.toString());
	        }
	}
}


package 第七次作业;
import java.util.Random;
public class 课后练习9_4 {
	public static void main(String[] args) {
		Random random = new Random(1000);
		for (int  i = 0 ; i < 50 ; i++){
            System.out.print(random.nextInt(100) + " ");
        }
	}
}


package 第七次作业;
import java.util.GregorianCalendar;
public class 课后练习9_5 {
	public static void main(String[] args) {
		GregorianCalendar gc = new GregorianCalendar();
		System.out.println(gc.get(GregorianCalendar.YEAR) + "年 " + (gc.get(GregorianCalendar.MONTH) +1) + "月 " +gc.get(GregorianCalendar.DAY_OF_MONTH) + "日");
		gc.setTimeInMillis(1234567898765L);
		System.out.println(gc.get(GregorianCalendar.YEAR) + "年 " + (gc.get(GregorianCalendar.MONTH) +1) + "月 " +gc.get(GregorianCalendar.DAY_OF_MONTH) + "日");
	}
}


package 第七次作业;

public class 课后练习9_6 {
	public static void main(String[] args) {
		
	StopWatch sw = new StopWatch();
	sw.start();   
    for(int i=0;i<9999999;i++){
        for(int j=0;j<9999999;j++){
        }
    }
    sw.stop();
    System.out.println(sw.getElapsedTime());
}
}
class StopWatch{
	private long startTime;
    private long endTime;
    public StopWatch(){
        this.startTime = System.currentTimeMillis();
    }
    public void start(){
        this.startTime = System.currentTimeMillis();
    }
    public void stop(){
        this.endTime = System.currentTimeMillis();
    }
    public long getElapsedTime(){
        return endTime-startTime;
    }
    public long getstartTime(){
        return startTime;
    }
    public long getendTime(){
        return endTime;
    }
}
